
Serial_data.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000f2  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000470  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000196  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034a  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000140  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  8a:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
	}        
}

void usart_init()
{
	UCSRB |= (1<<RXEN)|(1<<TXEN); // RECEIVER TRANSMITTER ENABLE
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	88 61       	ori	r24, 0x18	; 24
  96:	8a b9       	out	0x0a, r24	; 10
	//UBRRL |= 12; //BAUD RATE 4800
	UBRRL=baud_rate;
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	89 b9       	out	0x09, r24	; 9
	UBRRH=baud_rate<<8;
  9c:	10 bc       	out	0x20, r1	; 32
	UCSRC |= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1); // DATA SIZE SELECTION (BIT DATA SIZE) ( 8 BIT)
  9e:	80 b5       	in	r24, 0x20	; 32
  a0:	86 68       	ori	r24, 0x86	; 134
  a2:	80 bd       	out	0x20, r24	; 32
	//STOP BIT IS DEFAULT ZERO, SO CHANGE IS NOT NEEDED.
}
  a4:	08 95       	ret

000000a6 <main>:
#define baud_rate 12


int main(void)
{
	usart_init();
  a6:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	char *str = "BUET EEE";	
    while(1)
    {
		usart_send_string(str);
  aa:	c0 e6       	ldi	r28, 0x60	; 96
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	ce 01       	movw	r24, r28
  b0:	0e 94 68 00 	call	0xd0	; 0xd0 <usart_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f e3       	ldi	r24, 0x3F	; 63
  b6:	9d e0       	ldi	r25, 0x0D	; 13
  b8:	a3 e0       	ldi	r26, 0x03	; 3
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	a0 40       	sbci	r26, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x14>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x1e>
  c4:	00 00       	nop
  c6:	f3 cf       	rjmp	.-26     	; 0xae <main+0x8>

000000c8 <usart_send>:
	//STOP BIT IS DEFAULT ZERO, SO CHANGE IS NOT NEEDED.
}

void usart_send(char data)
{
	while(!(UCSRA&(1<<UDRE))); //WAIT TILL BUFFER IS EMPTY
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <usart_send>
	UDR = data; //LOAD NEW DATA
  cc:	8c b9       	out	0x0c, r24	; 12
}
  ce:	08 95       	ret

000000d0 <usart_send_string>:

void usart_send_string(char *str)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
	while(*str !='\0')
  d6:	88 81       	ld	r24, Y
  d8:	88 23       	and	r24, r24
  da:	31 f0       	breq	.+12     	; 0xe8 <usart_send_string+0x18>
{
	while(!(UCSRA&(1<<UDRE))); //WAIT TILL BUFFER IS EMPTY
	UDR = data; //LOAD NEW DATA
}

void usart_send_string(char *str)
  dc:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str !='\0')
	{
		usart_send(*str);
  de:	0e 94 64 00 	call	0xc8	; 0xc8 <usart_send>
	UDR = data; //LOAD NEW DATA
}

void usart_send_string(char *str)
{
	while(*str !='\0')
  e2:	89 91       	ld	r24, Y+
  e4:	88 23       	and	r24, r24
  e6:	d9 f7       	brne	.-10     	; 0xde <usart_send_string+0xe>
	{
		usart_send(*str);
		str++;	
	}
	
}	
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
