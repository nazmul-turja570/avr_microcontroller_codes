
Day 8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bd  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fb  00000000  00000000  00000869  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <usart_init>:
    }
}

void usart_init()
{
	UCSRB |= (1<<TXEN)|(1<<RXEN); // ENABLE RECEIVER AND TRANSMITTER
  6c:	8a b1       	in	r24, 0x0a	; 10
  6e:	88 61       	ori	r24, 0x18	; 24
  70:	8a b9       	out	0x0a, r24	; 10
	UBRRL = baudrate; // 1100 1000 1111 0111
  72:	8c e0       	ldi	r24, 0x0C	; 12
  74:	89 b9       	out	0x09, r24	; 9
	UBRRH = baudrate>>8;
  76:	10 bc       	out	0x20, r1	; 32
	UCSRC |= (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // Data Size Selection (8 bit)
  78:	80 b5       	in	r24, 0x20	; 32
  7a:	86 68       	ori	r24, 0x86	; 134
  7c:	80 bd       	out	0x20, r24	; 32
  7e:	08 95       	ret

00000080 <usart_send>:
}

void usart_send(char data)
{
	while(!(UCSRA&(1<<UDRE))); //confirm the data is transmitted
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <usart_send>
	UDR = data;
  84:	8c b9       	out	0x0c, r24	; 12
  86:	08 95       	ret

00000088 <main>:
#include <util/delay.h>
#define baudrate 12

int main(void)
{
	usart_init();
  88:	0e 94 36 00 	call	0x6c	; 0x6c <usart_init>
    
    while (1) 
    {
		usart_send('A');
  8c:	81 e4       	ldi	r24, 0x41	; 65
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 40 00 	call	0x80	; 0x80 <usart_send>
		usart_send('B');
  94:	82 e4       	ldi	r24, 0x42	; 66
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 40 00 	call	0x80	; 0x80 <usart_send>
		usart_send('C');
  9c:	83 e4       	ldi	r24, 0x43	; 67
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 40 00 	call	0x80	; 0x80 <usart_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f e3       	ldi	r18, 0x3F	; 63
  a6:	8d e0       	ldi	r24, 0x0D	; 13
  a8:	93 e0       	ldi	r25, 0x03	; 3
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x22>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x2c>
  b4:	00 00       	nop
  b6:	ea cf       	rjmp	.-44     	; 0x8c <main+0x4>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
